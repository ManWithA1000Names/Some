#!/bin/sh

PREFIX=.
PREFIX="$(realpath "$PREFIX")"

NIXPKGS_REV="f179420e7f6c6487a74e78b22631f53c86a715de"
FLAKE_UTILS_REV="ff7b65b44d01cf9ba6a71320833626af21126384"

SOME_IDENTIFIEER_TEXT="This file exists to identify that the fact that this directory is part of the 'some' project."

set -e

NIX_FLAKE_TEMPLATE="{ description = \"some {{name}}\";
  inputs = {
    flake-utils.url = \"github:numtide/flake-utils/$FLAKE_UTILS_REV\";
    nixpkgs.url = \"github:nixos/nixpkgs/$NIXPKGS_REV\";
  };

  outputs = { self, nixpkgs, flake-utils }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        pkgs = import nixpkgs { inherit system; };
        buildInputs = [{{inputs}} ];
      in {
        devShell = pkgs.mkShell { inherit buildInputs; };
      });
}"

# USER INTERACTION UTILITIES
confirm() {
	printf "%s: [Y/n] " "$1"
	read -r answer
	! echo "$answer" | grep -qP "[nN][oO]?"
}

# FS INTERACTION UTILITIES
is_some() {
	[ -d "$1/.git" ] && [ -f "$1/.is_some" ] && [ "$(cat "$1/.is_some")" = "$SOME_IDENTIFIEER_TEXT" ]
}

# NIX INTERACTION UTILITIES
create_flake_inputs() {
	lang="$1"
	shift
	for pkg in "$@"; do
		string="$string pkgs.$pkg"
	done
	if [ -f "$PREFIX/languages/$lang/dependencies.txt" ]; then
		while read -r pkg; do
			string="$string pkgs.$pkg"
		done <"$PREFIX/languages/$lang/dependencies.txt"
	fi
	echo "$string "
}

create_shell_arg_inputs() {
	lang="$1"
	shift
	for pkg in "$@"; do
		string="$string nixpkgs#$pkg"
	done
	if [ -f "$PREFIX/languages/$lang/dependencies.txt" ]; then
		while read -r pkg; do
			string="$string nixpkgs#$pkg"
		done <"$PREFIX/languages/$lang/dependencies.txt"
	fi
	echo "$string"
}

## MAIN ##

# If you call the program without any arguments then print the help message and xit.
if [ -z "$1" ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
	echo "some: Quick and dirty scratch pads for programming languages powered by 'nix & make'."
	echo ""
	echo "USAGE:"
	echo "    some <LANG>"
	echo ""
	echo "FLAGS:"
	echo "    --save  | -s <LANG>      Save the code for <LANG> to a permanent location"
	echo "    --clean | -c [<LANG>]    Delete the file generate by the use the some command. Could be all file or just for a specific language if provided."
	echo "    --env   | -e <LANG>      Instead of creating a scratch pad recreate the would have been environment in the current directory."
	echo "    --help  | -h             Show this help message."
	echo ""
	echo "Supported languages:"
	for l in "$PREFIX"/languages/*; do
		echo "    $(basename "$l")"
	done
	exit 0
fi

if [ "$1" = "--clean" ] || [ "$1" = "-c" ]; then
	if [ -n "$2" ]; then
		if [ ! -d "/tmp/some_$2" ]; then
			echo "you don't have any '$2' code."
			exit 1
		fi
		rm -rf /tmp/"some_$2"
		echo "Deleted /tmp/some_$2"
		exit 0
	fi
	for l in "$PREFIX"/languages/*; do
		lang="$(basename "$l")"
		if [ -d "/tmp/some_$lang" ]; then
			rm -rf /tmp/"some_$lang"
			echo "Deleted /tmp/some_$lang"
		fi
	done
	echo "All done!"
	exit 0
fi

# Save temporary code to a permanent location
if [ "$1" = "--save" ] || [ "$1" = "-s" ]; then
	if [ -z "$2" ]; then
		echo "Please specify which language you want to save."
		exit 1
	fi

	if ! is_some "/tmp/some_$2"; then
		echo "You don't have a some '$2' code."
		exit 1
	fi

	while true; do
		printf "Where do you want to save documents to?: "
		read -r path
		path="$(eval "echo $path")"
		parent="$(dirname "$path")"

		if [ -f "$path" ]; then
			echo "There already exists a file at path: '$path'"
			if confirm "Do you whish for this file to be overriden?"; then
				rm "$path"
				echo "Overriden '$path'..."
				break
			fi
			continue
		fi

		if [ -d "$parent" ]; then
			break
		fi

		echo "Path: The path '$parent' does not exist!"
		if confirm "Is it ok if it created?"; then
			mkdir -p "$parent"
			echo "Created '$parent'..."
			break
		fi
	done
	echo "Executing: mv \"/tmp/some_$2\" \"$path\"..."
	if mv "/tmp/some_$2" "$path"; then
		echo "Done."
	fi
	exit $?
fi

if [ "$1" = "--env" ] || [ "$1" = "-e" ]; then
	if [ -z "$2" ]; then
		echo "Please specify from which language you want to create the environment."
		exit 1
	fi

	shift # <---
	if [ ! -d "$PREFIX/languages/$1" ]; then
		echo "'$1' is not implemented yet!"
		exit 1
	fi
	exec nix shell $(create_shell_arg_inputs "$@")
fi

# If the language supplied by the user is not a subdirectory of $PREFIX/languages
# then it is regarded as 'unimplemented'
if [ ! -d "$PREFIX/languages/$1" ]; then
	echo "'$1' is not implemented yet!"
	exit 1
fi

# Be careful not to delete random user data
if [ -e "/tmp/some_$1" ] && ! is_some "/tmp/some_$1"; then
	if ! confirm "'some' is trying to overwrite the path '/tmp/some_$1', is that okay?"; then
		exit 1
	fi
fi

# Delete maybe existing directory
rm -rf "/tmp/some_$1" 2>/dev/null
# Create fresh empty directory
mkdir -p /tmp/"some_$1"
# Enter the newly created directory
cd "/tmp/some_$1"
# Make this directory identifiable as a 'some' directory
echo "$SOME_IDENTIFIEER_TEXT" >.is_some
# Generate the nix flake
echo "$NIX_FLAKE_TEMPLATE" | sed "s/{{name}}/$1/" | sed "s/{{inputs}}/$(create_flake_inputs "$@")/" >flake.nix
# Language specific project initialization command
nix develop -c sh "$PREFIX/languages/$1/init.sh"
# Add the special .is_some file to the git ignored files
echo ".is_some" >>.gitignore
# Copy the Makefile for easy use of rapidly changing languages
cp "$PREFIX/languages/$1/Makefile" .
# If the initialization command did not create a git repository, create one.
if [ ! -d .git ]; then git init .; fi
# Perform the initial commit
git add . && git commit -m "initial commit"
if [ -n "$EDITOR" ]; then
	# Start the editor
	exec nix develop -c "$EDITOR" "$(cat "$PREFIX/languages/$1/main-file.txt")"
elif [ -n "$SHELL" ]; then
	# Start the SHELL
	exec nix develop -c "$SHELL"
else
	exec nix develop
fi
