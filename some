#!/bin/sh

PREFIX=~/Development/Utilities/Some/

set -e

NIX_FLAKE_TEMPLATE="{
  description = \"some {{name}}\";

  inputs = {
    flake-utils.url = \"github:numtide/flake-utils\";
    nixpkgs.url = \"github:nixos/nixpkgs/nixos-unstable\";
  };

  outputs = { self, nixpkgs, flake-utils }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        pkgs = import nixpkgs { inherit system; };
        shellInputs = [{{inputs}} ];
      in {
        devShells = {
          default = pkgs.mkShell {
            buildInputs = shellInputs;
            shellHook = ''
              exec \$SHELL 
            '';
          };
          editor = pkgs.mkShell {
            buildInputs = shellInputs;
            shellHook = ''
              exec \$EDITOR {{pathtomain}}
            '';
          };
        };
      });
}"

# USER INTERACTION UTILITIES
confirm() {
	printf "%s: [Y/n] " "$1"
	read -r answer
	if [ "$answer" = "no" ] || [ "$answer" = "NO" ] || [ "$answer" = "No" ] || [ "$answer" = "nO" ] || [ "$answer" = "n" ] || [ "$answer" = "N" ]; then
		return 1
	fi
	return 0
}

# FS INTERACTION UTILITIES
is_some() {
	if [ ! -d "$1/.git" ]; then
		return 1
	fi

	if [ ! -f "$1/.is_some" ]; then
		return 1
	fi

	if [ "$(cat "$1/.is_some")" = "This file exists to identify that the fact that this directory is part of the 'some' project." ]; then
		return 0
	fi
	return 1
}

# NIX INTERACTION UTILITIES
create_flake_inputs() {
	lang="$1"
	shift
	string=""
	for pkg in "$@"; do
		string="$string pkgs.$pkg"
	done
	for pkg in $(awk -F'"' '/depencies/ {print $2}' "$PREFIX/languages/$lang/config.toml"); do
		string="$string pkgs.$pkg"
	done
	echo "$string "
}

## MAIN ##

# If you call the program without any arguments then print the help message and exit.
if [ -z "$1" ]; then
	echo "some: Quick and dirty scratch pads for popular programming languages."
	echo ""
	echo "USAGE:"
	echo "    some <LANG>"
	echo ""
	echo "FLAGS:"
	echo "    --save | -s <LANG>    Save the code for <LANG> to a permanent location"
	echo ""
	echo "Supported languages:"
	for l in "$PREFIX"/languages/*; do
		echo "    $(basename "$l")"
	done
	exit 0
fi

# Save temporary code to a permanent location
if [ "$1" = "--save" ] || [ "$1" = "-s" ]; then
	if [ -z "$2" ]; then
		echo "Please specify which language you want to save."
		exit 1
	fi

	if ! is_some "/tmp/$2"; then
		echo "You don't have a some '$2' code."
		exit 1
	fi

	while true; do
		printf "Where do you want to save documents to?: "
		read -r path
		path="$(eval "echo $path")"
		parent="$(dirname "$path")"

		if [ -f "$path" ]; then
			echo "There already exists a file at path: '$path'"
			if confirm "Do you whish for this file to be overriden?"; then
				rm "$path"
				echo "Overriden '$path'..."
				break
			fi
			continue
		fi

		if [ -d "$parent" ]; then
			break
		fi

		echo "Path: The path '$parent' does not exist!"
		if confirm "Is it ok if it created?"; then
			mkdir -p "$parent"
			echo "Created '$parent'..."
			break
		fi
	done

	cp -R "/tmp/$2" "/tmp/$2-cp"
	rm -rf "/tmp/$2-cp/.git" 2>/dev/null
	rm -rf "/tmp/$2-cp/.is_some" 2>/dev/null
	rm -rf "/tmp/$2-cp/flake.nix" 2>/dev/null
	rm -rf "/tmp/$2-cp/.gitignore" 2>/dev/null
	rm -rf "/tmp/$2-cp/flake.lock" 2>/dev/null
	rm -rf "/tmp/$2-cp/Makefile" 2>/dev/null
	if [ -d "$path" ]; then
		mv "/tmp/$2-cp" "$path/$(basename "$path")"
	else
		mv "/tmp/$2-cp" "$path"
	fi
	exit 0
fi

# If the language supplied by the user is not a subdirectory of $PREFIX/languages
# then it is regarded as 'unimplemented'
if [ ! -d "$PREFIX/languages/$1" ]; then
	echo "'$1' is not implemented yet!"
	exit 1
fi

# Be careful not to delete random user data
if [ -e "/tmp/$1" ] && ! is_some "/tmp/$1"; then
	if ! confirm "'some' is trying to overwrite the path '/tmp/$1', is that okay?"; then
		exit 1
	fi
fi

# Delete maybe existing directory
rm -rf "/tmp/$1" 2>/dev/null
# Create fresh empty directory
mkdir "/tmp/$1/"
# Enter the newly created directory
cd "/tmp/$1"
# Make this directory identifiable as a 'some' directory
echo "This file exists to identify that the fact that this directory is part of the 'some' project." >.is_some
# Generate the nix flake
echo "$NIX_FLAKE_TEMPLATE" | sed "s/{{name}}/$1/" | sed "s@{{pathtomain}}@$(awk -F'"' '/main-file/ {print $2}' "$PREFIX/languages/$1/config.toml")@" | sed "s/{{inputs}}/$(create_flake_inputs "$@")/" >flake.nix
# Language specific project initialization command
eval "$(awk -F'"' '/init-command/ {print $2}' "$PREFIX/languages/$1/config.toml")"
# Add the special .is_some file to the git ignored files
echo ".is_some" >>.gitignore
# Copy the Makefile for easy use of rapidly changing languages
cp "$PREFIX/languages/$1/Makefile" .
# If the initialization command did not create a git repository, create one.
if [ ! -d .git ]; then git init .; fi
# Perform the initial commit
git add . && git commit -m "initial commit"
# Start the editor
exec nix develop .#editor
